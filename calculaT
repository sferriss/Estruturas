package calculatemp;

public class calculaT<T> {

    //Arrays
    protected T[] arrayAscendente;
    protected T[] arrayDescendente;
    protected T[] arrayAleatorio;
    protected T[] arrayAleatorioRep;
    protected long[] tempo = new long[10];
    protected int[] cenarios = new int[10];

    /**
     * Metódos para instanciar os cenários
     */
    //Instancia os 4 cenários
    public void instancia(int tamArray) {
        ascendente(tamArray);
        descendente(tamArray);
        aleatorio(tamArray);
        aleatorioRep(tamArray);
    }

    //Ascendente: no array terá chaves únicas em ordem crescente
    private void ascendente(int tamArray) {
        arrayAscendente = (T[]) new Comparable[tamArray];
        for (Integer i = 0; i < arrayAscendente.length; i++) {
            arrayAscendente[i] = (T) i;
        }
    }

    //Descendente: no array terá chaves únicas em ordem decrescente
    private void descendente(int tamArray) {
        arrayDescendente = (T[]) new Comparable[tamArray];
        for (int i = 0; i < arrayDescendente.length; i++) {
            tamArray--;
            arrayDescendente[i] = arrayAscendente[tamArray];
        }
    }

    //Aleatória: no array terá chaves únicas distribuídas aleatoriamente
    private void aleatorio(int tamArray) {
        arrayAleatorio = (T[]) new Comparable[tamArray];
        for (int i = 0; i < arrayAleatorio.length; i++) {
            arrayAleatorio[i + 1] = arrayAscendente[i];
            arrayAleatorio[i] = arrayDescendente[i];
            i++;
        }
    }

    // Aleátoria repetida
    private void aleatorioRep(int tamArray) {
        arrayAleatorioRep = (T[]) new Comparable[tamArray];
        int cont = 0;
        int quantV = 0;
        int proporcao = proporcao(tamArray);
        for (int i = 0; i < arrayAleatorioRep.length; i++) {
            if (arrayAleatorioRep[i] == null) {
                arrayAleatorioRep[i] = arrayAleatorio[i];
                if ((((cont * 7) / 3) % 2 != 0) && quantV < proporcao) {
                    arrayAleatorioRep[i + 1] = arrayAleatorioRep[i];
                    quantV++;
                    cont = 0;
                }
            }
            cont++;
        }
    }

    //Guarda valores dos cenários
    public void criaCenario() {
        for (int i = 0; i < cenarios.length; i++) {
            if (i >= 1) {
                cenarios[i] = 2 * cenarios[i - 1];
            } else {
                cenarios[i] = 128;
            }
        }
    }

    //Guarda os nanossegundos
    public void guardaTempo(long temp) {
        boolean cond = false;
        int i = 0;
        while (!cond) {
            if (this.tempo[i] == 0) {
                this.tempo[i] = temp;
                System.out.println("Tempo " + this.tempo[i]);
                cond = true;

            }
            i++;
        }

    }

    /**
     * Metódos auxiliares
     */
    //Imprimir array
    public void imprime(T[] a) {
        System.out.println("Tamanho do array: " + a.length);
        for (T a1 : a) {
            System.out.print(a1 + " ");
        }
        System.out.println();
        System.out.println();
    }

    //Verifica se tem repetição
    public void repetido(T[] a) {
        int cont = 0;
        for (int i = 0; i < a.length - 1; i++) {
            if (a[i].equals(a[i + 1])) {
                System.out.println("Valor " + i + ": " + a[i]);
                cont++;
            }
        }
        System.out.println();
        System.out.println("Total de repetido: " + cont);
    }

//    Calcula 5% de n
    private int proporcao(int n) {
        return (int) (n * 0.05);
    }

    /**
     * Algoritimos de ordenação
     */
    //Exchange
    private <T extends Comparable<? super T>> void exchange(T[] a, int i, int j) {
        T tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
    }

    //BubbleSort
    public <T extends Comparable<? super T>> void bubbleSort(T[] a) {
        long inicio = System.nanoTime();
        boolean exchange;
        do {
            exchange = false;
            for (int i = 0; i < a.length - 1; i++) {
                if (a[i].compareTo(a[i + 1]) > 0) {
                    exchange(a, i, i + 1);
                    exchange = true;
                }
            }
        } while (exchange);

        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);
    }

    //InsertionSort
    public <T extends Comparable<? super T>> void insertionSort(T[] a) {
        long inicio = System.nanoTime();
        for (int i = 1; i < a.length; i++) {
            for (int j = i; j > 0 && a[j - 1].compareTo(a[j]) > 0; j--) {
                exchange(a, j - 1, j);
            }
        }
        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);

    }

    //SelectionSort
    public <T extends Comparable<? super T>> void selectionSort(T[] a) {
        long inicio = System.nanoTime();
        for (int min, i = 0; i < a.length; i++) {
            min = i;
            for (int j = i + 1; j < a.length; j++) {
                if (a[j].compareTo(a[min]) < 0) {
                    min = j;
                }
            }
            exchange(a, min, i);
        }
        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);

    }

    //HeapSort
    public <T extends Comparable<? super T>> void heapSort(T[] a) {
        long inicio = System.nanoTime();
        buildMaxHeap(a);
        for (int i = a.length - 1; i > 0; i--) {
            exchange(a, 0, i);
            maxHeapify(a, 0, i);
        }
        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);
    }

    private <T extends Comparable<? super T>> void buildMaxHeap(T[] a) {
        for (int i = a.length / 2 - 1; i >= 0; i--) {
            maxHeapify(a, i, a.length);
        }
    }

    private <T extends Comparable<? super T>> void maxHeapify(T[] a, int i, int n) {
        int max = 2 * i + 1;
        if (max + 1 < n && a[max].compareTo(a[max + 1]) < 0) {
            max++;
        }
        if (max < n && a[max].compareTo(a[i]) > 0) {
            exchange(a, i, max);
            maxHeapify(a, max, n);
        }
    }

    //ShellSort
    public <T extends Comparable<? super T>> void shellSort(T[] a) {
        long inicio = System.nanoTime();
        int h = 1;
        while (3 * h + 1 < a.length) {
            h = 3 * h + 1;
        }
        while (h > 0) {
            for (int i = h; i < a.length; i++) {
                for (int j = i; j >= h && a[j - h].compareTo(a[j]) > 0; j -= h) {
                    exchange(a, j - h, j);
                }
            }
            h /= 3;
        }
        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);
    }

    //MergeSort
    public <T extends Comparable<? super T>> void mergeSort(T[] a) {
        long inicio = System.nanoTime();
        T[] aux = (T[]) new Comparable[a.length];
        divide(a, aux, 0, a.length - 1);
        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);
    }

    private <T extends Comparable<? super T>> void divide(T[] a, T[] aux, int low, int high) {
        if (low >= high) {
            return;
        }

        int middle = (low + high) / 2;
        divide(a, aux, low, middle);
        divide(a, aux, middle + 1, high);
        conquer(a, aux, low, middle, high);
    }

    private <T extends Comparable<? super T>> void conquer(T[] a, T[] aux, int low, int middle, int high) {
        for (int k = low; k <= high; k++) {
            aux[k] = a[k];
        }
        int i = low, j = middle + 1;
        for (int k = low; k <= high; k++) {
            if (i > middle) {
                a[k] = aux[j++];
            } else if (j > high) {
                a[k] = aux[i++];
            } else if (aux[j].compareTo(aux[i]) < 0) {
                a[k] = aux[j++];
            } else {
                a[k] = aux[i++];
            }
        }
    }

    public <T extends Comparable<? super T>> void mergeSortBottomUp(T[] a) {
        int n = a.length;
        T[] aux = (T[]) new Comparable[n];
        for (int len = 1; len < n; len *= 2) {
            for (int low = 0; low < n - len; low += len + len) {
                int middle = low + len - 1;
                int high = Math.min(low + len + len - 1, n - 1);
                conquer(a, aux, low, middle, high);
            }
        }
    }

    //QuickSort
    public <T extends Comparable<? super T>> void quickSort(T[] a) {
        long inicio = System.nanoTime();

        sort(a, 0, a.length - 1);

        long fim = System.nanoTime() - inicio;
        System.out.println(fim);
        guardaTempo(fim);
    }

    private <T extends Comparable<? super T>> void sort(T[] a, int low, int high) {
        if (low >= high) {
            return;
        }
        int p = partition(a, low, high);
        sort(a, low, p - 1);
        sort(a, p + 1, high);
    }

    private <T extends Comparable<? super T>> int partition(T[] a, int low, int high) {
        T pivot = a[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (a[j].compareTo(pivot) <= 0) {
                exchange(a, ++i, j);
            }
        }
        exchange(a, i + 1, high);
        return i + 1;
    }

    /**
     * Getters
     *
     * @return
     */
    public T[] getArrayAscendente() {
        return arrayAscendente;
    }

    public T[] getArrayDescendente() {
        return arrayDescendente;
    }

    public T[] getArrayAleatorio() {
        return arrayAleatorio;
    }

    public T[] getArrayAleatorioRep() {
        return arrayAleatorioRep;
    }

    public long[] getTempo() {
        return tempo;
    }
}
